@{
	ViewBag.Title = "RTS Log Parsing Project";
}

<div class="wrapper wrapper-content animated fadeInRight">

	<div class="row">
		<div class="col-lg-12">

			<div class="text-center m-t-lg">
				<h1>Current Metrics From Log</h1>
				<small>Don't worry, be happy.</small>
			</div>

		</div>
	</div>

	<hr />

	<div class="row">

		<!-- World Map -->
		<div class="col-md-12">

			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">Message Appearance by Country</h3>
				</div>
				<div class="panel-body">
                    <div id="regions_date_slider"></div>
					<div id="regions_div" style="height:800px; max-height:800px;"></div>
				</div>
			</div>

		</div>

		<div class="col-md-4">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">Top 10 Countries</h3>
				</div>
				<div class="panel-body">
					<table class="table table-condensed table-hover table-striped topCountriesTbl">
						<thead>
							<tr>
								<th>Rank</th>
								<th>Country Code</th>
								<th>Total Messages</th>
							</tr>
						</thead>
						<tbody></tbody>
					</table>
				</div>
                <div class="panel-footer">
                    <a href="#" class="btn btn-primary btn-block">View All Country Trends</a>
                </div>
			</div>
		</div>

		<div class="col-md-8">

			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">Live Feed (SignalR)</h3>
				</div>
				<div class="panel-body">
					<div class="btn-group">
						<a href="#" class="btn btn-success liveFeedStart">Start</a>
						<a href="#" class="btn btn-danger liveFeedStop">Stop</a>
						<a href="#" class="btn btn-warning liveFeedReset">Reset</a>
					</div>
					<hr />
					<div class="life-feed-chart" style="height:380px;"></div>
				</div>
			</div>

		</div>

		<!-- Top Three Message Types -->
		<div class="col-md-12">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">Overall Top 3 Message Types</h3>
				</div>
				<div class="panel-body">

					<div class="row">
						<div class="col-md-4">
							<div class="top-message-chart" data-top-chart="1"></div>
							<h3 class="text-center">--</h3>
						</div>
						<div class="col-md-4">
							<div class="top-message-chart" data-top-chart="2"></div>
							<h3 class="text-center">--</h3>
						</div>
						<div class="col-md-4">
							<div class="top-message-chart" data-top-chart="3"></div>
							<h3 class="text-center">--</h3>
						</div>
					</div>

				</div>
			</div>
		</div>


		<!-- Message Appearance -->
		<!-- Message Traffic and trends -->
		<div class="col-md-12">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">Messages (Appearance Heatmap and Trend)</h3>
				</div>
				<div class="panel-body">

					<div class="form-inline">
						<div class="form-group">
							<select class="form-control calendar-heatmap-messagetype"></select>
						</div>
						<div class="btn-group">
							<a href="#" class="btn btn-primary calendar-heatmap-previous">Previous</a>
							<a href="#" class="btn btn-primary calendar-heatmap-next">Next</a>
						</div>
						<a href="#" class="btn btn-warning calendar-heatmap-reset">Reset</a>
					</div>

					<hr />
					<div class="calendar-heatmap"></div>
					<hr />
					<div class="traffic-chart" style="height:380px;"></div>

				</div>
			</div>
		</div>

	</div>

</div>

@section Styles {
	@Styles.Render("~/Content/plugins/dataTables")
	@Styles.Render("~/Content/plugins/calHeatmap")
    @Styles.Render("~/Content/plugins/nouislider");

	<style>
		.cal-heatmap-container {
			margin: 0 auto;
		}

			.cal-heatmap-container .subdomain-text {
				fill: white;
				font-size: 10px;
			}

			.cal-heatmap-container .graph-rect ~ .subdomain-text {
				fill: inherit;
			}

			.cal-heatmap-container .graph-label {
				font-weight: bold;
			}

		.top-message-chart {
			height: 280px;
			margin-top: 1rem;
			width: 100%;
		}

		.vs-other-chart-pie, .vs-other-chart-line {
			height: 280px;
			margin-top: 2rem;
			width: 100%;
		}
        #regions_date_slider {
            margin:5px 35px 50px 35px;
        }
	</style>

}

@section Scripts {
	@*Scripts.Render("~/plugins/chartJs")*@
	@Scripts.Render("~/plugins/jqcanvasjs")

	@Scripts.Render("~/bundles/momentjs")
	@Scripts.Render("~/bundles/d3v3")
	@Scripts.Render("~/bundles/plugins/calHeatmap")
	@Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/bundles/plugins/nouislider")

	<!-- Because reasons... -->
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>

	<!--Reference the SignalR library. -->
	<script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
	<!--Reference the autogenerated SignalR hub script. -->
	<script src="~/signalr/hubs"></script>

	<script>
		(function () {

			///////////////////////////
			// Main Stuff
			///////////////////////////

			var msgTypesURL = "@Url.Action("GetMessageClasses", "Records")";
			var msgDataURL = "@Url.Action("GetDateGroupedMessages", "Records")";
			var msgTopUrl = "@Url.Action("GetTopOfMessages", "Records")";
			var msgCountryUrl = "@Url.Action("GetMessageOccuranceByCountry", "Records")";
			var defaultMsgType = "INVALIDRECIP";
			var messageTypes = [];

			//////////////////
			// Classes ( I DONT CARE )
			//////////////////

			// Class to add some functionality to Google's GeoChart dohicky
			var GeoChartBuilder = function (mapElement, sliderElement) {
				var self = this;

				this.element = mapElement;

				this.sourceData = [];
                this.mapData = null;
                this.mapSlider = sliderElement;

				this.mapChart = null;
				this.mapOptions = {
					region: "world",
					colorAxis: {
						colors: ["#ecf5e2", "#232181"]
					},
					tooltip: {
						isHtml: true
					}
				};

				this.defaultRegion = "world";
				this.currentRegion = null;

                var dateFormat = "MM/DD/YYYY";
                var dateFormatter = {
                    to: function (value) { return moment(new Date(value)).format(dateFormat); },
                    from: function (value) { return moment(value).toDate().getTime(); }
                };

                var loadingDateData = false;
                var lastSetDateValues = [];
                

				/////////
				// Init
				/////////

                self.mapChart = new google.visualization.GeoChart(self.element);

                var startDate = moment('2016-11-02').toDate().getTime(),
                    endDate = moment('2016-12-03').toDate().getTime()
                noUiSlider.create(self.mapSlider, {
                    connect: true,
                    behaviour: 'tap-drag',
                    tooltips: [dateFormatter, dateFormatter],
                    range: { min: startDate, max: endDate },
                    start: [startDate, endDate],
                    step: 24 * 60 * 60 * 1000, // 1 Day
                    format: wNumb({ decimals: 0 }),
                    pips: {
                        mode: 'steps',
                        density: 3,
                        filter: function (value, type) {
                            var modDay = (5 * 24 * 60 * 60 * 1000); // every 5th day
                            return ((startDate - value) % modDay) ? 0 : 1; // every 5 days?
                        },
                        format: dateFormatter
                    }
                });

				///////////
				// Public Functions
				//////////

				this.loadData = function (data) {

					// Very straight forward, I am not making this to be reusable in the slightest bit, just enough to clean up code

					self.sourceData = data;

					var chartData = Enumerable.From(self.sourceData).Select(function (e) {
						return [e.country, e.total, buildTooltipHtml(e.country, e.total)];
					}).ToArray();

                    self.mapData = new google.visualization.DataTable();
					self.mapData.addColumn('string', 'Country');
					self.mapData.addColumn('number', 'Messages');
					self.mapData.addColumn({ type: 'string', role: 'tooltip', 'p': { 'html': true } });

					self.mapData.addRows(chartData);

					self.renderMap();
				}

				this.getCountryFromCode = function (code) {
					return getCountryName(code);
				};

				this.renderMap = function (data) {

					if (data)
						self.loadData(data);

					self.mapChart.draw(self.mapData, self.mapOptions);
				};

				this.goToRegion = function (region) {
					self.currentRegion = region || self.defaultRegion;
					self.mapOptions.region = self.currentRegion;
					self.renderMap();
				};

				this.reset = function () {
					self.goToRegion(self.defaultRegion);
				};

				//////////
				// Private Functions
				//////////

				function buildTooltipHtml(country, value) {
					return "<strong>" + self.getCountryFromCode(country) + "</strong><br/>Messages: <strong>" + value + "</strong>";
                }

               
                function filterDataByDates(start, end) {
                    
                    if (loadingDateData) {
                        lastSetDateValues = [start, end];
                        console.log("Map filter throttle", lastSetDateValues);
                        return;
                    }

                    loadingDateData = true;

                    var startDate = moment(new Date(+start)).format(),
                        endDate = moment(new Date(+end)).endOf("day").format();

                    console.log("Filtering Map", start, startDate, end, endDate);

                    GetData(msgCountryUrl, { startDate: startDate, endDate: endDate }).then(function (data) {
                        console.log("Filtered Map data", data);
                        worldMap.renderMap(data);
                        topTenTbl.buildTable(data);
                        loadingDateData = false;
                    }).then(function () {
                        if (lastSetDateValues.length == 2) {
                            var tmp = lastSetDateValues.slice();
                            lastSetDateValues.length = 0;
                            console.log("Map filter throrttled recovery", tmp);
                            filterDataByDates(tmp[0], tmp[1]);
                        }
                    });

                }

				//////////
				// Events
				//////////

				//redraw graph when window resize is completed
				$(window).on('resizeEnd', function () { self.renderMap(); });

				// Click on a region, zoom into it
				google.visualization.events.addListener(self.mapChart, "regionClick", function (e) {
					var newRegion = (e.region != self.currentRegion) ? e.region : null;
					self.goToRegion(newRegion);
                });

                // Slider Events
                self.mapSlider.noUiSlider.on('set', function (values, handle, unencoded, tap, position) {
                    filterDataByDates(values[0], values[1]);
                });

			};

			// Class to display the top ten countries, might as well right?
			var TopTenCountryTable = function (tblElement) {
				var self = this;

				this.element = tblElement;
				this.sourceData = [];

				this.buildTable = function (data) {

					self.sourceData = data;

                    var tBody = self.element.find('tbody');

                    tBody.empty();

					Enumerable.From(data).OrderByDescending("$.total").Take(10).ForEach(function (item, index) {
						var tr = $('<tr/>');
						var a = $('<a/>', { 'data-country-code': item.country }).addClass('topCountryTblItem').text(getCountryName(item.country));

						$('<td/>').text((index + 1)).appendTo(tr);
						$('<td/>').append(a).appendTo(tr);
						$('<td/>').text(item.total).appendTo(tr);

						tr.appendTo(tBody);
					});

				};

			};

			// SignalR driven life-feed chart, this encapsulates it all
			var LifeFeedChart = function (chartElement, config) {
				var self = this;

				var defaultOptions = {
					controls: {
						play: null,
						stop: null,
						reset: null,
					}
				};
				var options = $.extend(true, {}, defaultOptions, config);
				this.element = chartElement;
				this.hub = $.connection.logRecordTickerHub;

				this.chart = null;

				this.PlayFeed = function () { self.hub.server.startListening(); };
				this.StopFeed = function () { self.hub.server.stopListening(); };
				this.ResetFeed = function () { self.hub.server.reset(); };

				this.clearData = function () { self.chart.options.data[0].dataPoints.length = 0; };
				this.addData = function (x, y) { self.chart.options.data[0].dataPoints.push({ x: x, y: y }); };
				this.trimData = function (len) { if (self.chart.options.data[0].dataPoints.length > len) self.chart.options.data[0].dataPoints.shift(); };

				this.renderChart = function () {
					if (self.chart == null) { console.log('chart is null'); return; }
					self.chart.render();
				};

				//////////////
				// Hub Stuff
				//////////////

				options.controls.play.attr('disabled', 'disabled');
				options.controls.stop.attr('disabled', 'disabled');
				options.controls.reset.attr('disabled', 'disabled');

				self.hub.client.tickerStarted = function () {
					console.log('Live Feed Started');
				};
				self.hub.client.tickerStopped = function () {
					console.log('Live Feed Stopped');
					self.clearData();
				};
				self.hub.client.tickerReset = function () {
					console.log('Live Feed Reset');
					self.clearData();
				};
				self.hub.client.tickerUpdate = function (record) {

					console.log('SignalR data received.');

					if (self.chart == null) return;

					self.trimData(100);
					self.addData(moment.utc(record.Item1).toDate(), record.Item2);
					self.renderChart();
				};

				$.connection.hub.start().done(function () {
					
					if (options.controls.play.length > 0) options.controls.play.on('click', function (e) { e.preventDefault(); self.PlayFeed(); });
					if (options.controls.stop.length > 0) options.controls.stop.on('click', function (e) { e.preventDefault(); self.StopFeed(); });
					if (options.controls.reset.length > 0) options.controls.reset.on('click', function (e) { e.preventDefault(); self.ResetFeed(); });

					options.controls.play.attr('disabled', false);
					options.controls.stop.attr('disabled', false);
					options.controls.reset.attr('disabled', false);

					self.element.CanvasJSChart({
						toolTip: {
							contentFormatter: function (e) {
								var x = e.entries[0].dataPoint.x;
								var y = e.entries[0].dataPoint.y;
								return moment(x).format("MM/DD/YYYY h:mm A") + "<br/>Count: <strong>" + y + "</strong>";
							}
						},
						data: [{
							type: 'splineArea',
							dataPoints: []
						}]
					});

					self.chart = self.element.CanvasJSChart(); // because odd?

					console.log(self.chart);

				});

			};

			// Class to display message counts in an heatmap
			var HeatMapBuilder = function (element, config) {

				var self = this;
				this.element = element;

				var defaults = {
					previousSelector: ".calendar-heatmap-previous",
					nextSelector: ".calendar-heatmap-next"
				};
				var options = $.extend(true, {}, defaults, config);

				this.sourceData = null;
				this.data = {};
				this.currentView = "month";
				this.chart = null; // new CalHeatMap();

				this.chartDefaultOptions = {
					data: self.data,
					itemSelector: self.element,
					cellSize: 30,
					legendColors: ["#ecf5e2", "#232181"],
					legendOrientation: "vertical",
					legendVerticalPosition: "center",
					legendCellSize: 15,
					legendMargin: [10, 20, 0, 0],

					// These need to fill out by the data and getOptions
					start: null,
					minDate: null,
					maxDate: null,
					legend: null,

					previousSelector: options.previousSelector,
					nextSelector: options.nextSelector
				};

				this.loadData = function (data) {
					var eData = Enumerable.From(data);
					this.sourceData = eData;

					var startDate = moment(eData.FirstOrDefault().date).toDate();
					var lastDate = moment(eData.LastOrDefault().date).toDate();
					eData.ForEach(function (x) { self.data[moment(x.date).unix()] = x.total; });

					self.chartDefaultOptions.start = (this.currentView == 'month') ? startDate : (self.chartDefaultOptions.start || startDate);
					self.chartDefaultOptions.minDate = startDate;
					self.chartDefaultOptions.maxDate = lastDate;
				};

				this.render = function (view, data) {

					if (data != null) self.loadData(data);
					if (self.chart != null) self.chart = self.chart.destroy();
					if (self.chart == null) self.chart = new CalHeatMap();

					var viewOptions = getOptions(view);
					self.currentView = view;
					self.chart.init(viewOptions);
				};

				function getOptions(view) {
					return $.extend(true, {}, self.chartDefaultOptions, (view != "month") ? getDayOptions() : getMonthOptions());
				};
				function getMonthOptions() {
					var upperDomain = self.sourceData.GroupBy("moment($.date).startOf('day').format()", null, function (key, g) { return { date: key, total: g.Sum("$.total") }; }).Max("$.total");
					return {
						domain: "month",
						subDomain: "x_day",
						subDomainTextFormat: "%d",
						range: 2,
						domainGutter: 15,
						legend: Enumerable.RangeTo(0, upperDomain, (upperDomain / 6)).ToArray(),
						onClick: function (date, nb) {
							self.chartDefaultOptions.start = moment(date).toDate();
							self.render('day');
						}
					};
				};
				function getDayOptions() {
					var upperDomain = self.sourceData.Max("$.total");
					return {
						domain: "day",
						subDomain: "hour",
						subDomainTextFormat: "%H",
						rowLimit: 1,
						domainGutter: 0,
						cellPadding: 5,
						cellSize: 20,
						range: 7,
						verticalOrientation: true,
						legend: Enumerable.RangeTo(0, upperDomain, (upperDomain / 6)).ToArray(),
						label: { position: "left", offset: { x: 20, y: 12 }, width: 110 },
						onClick: null
					}
				};

			};

			// Class to display the traffic chart with trend lines
			var TrafficChart = function (element, config) {
				var self = this;

				var defaults = {};
				var options = $.extend(true, {}, defaults, config);

				this.element = element;
				this.data = [];

				this.chartConfig = {
					toolTip: {
						shared: true
					},
					legend: {
						cursor: "pointer",
						itemclick: function (e) {
							e.dataSeries.visible = !(typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible);
							e.chart.render();
						}
					},
					data: [
						{
							type: "splineArea",
							showInLegend: true,
							name: "Traffic",
							dataPoints: []
						},
						{
							type: "spline",
							showInLegend: true,
							name: "Curve Trend",
							markerSize: 0,
							color: "red",
							dataPoints: []
						},
						{
							type: "line",
							showInLegend: true,
							name: "Linear Trend",
							markerSize: 0,
							color: "black",
							dataPoints: []
						}
					]
				};

				this.render = function (data) {
					if (data == null) return;

					self.data = data;

					var chartData = Enumerable.From(self.data)
						.GroupBy("moment($.date).startOf('day').format()", null, function (key, g) {
							return { date: key, total: g.Sum("$.total") };
						})
						.Select("{ x:moment.utc($.date).toDate(), y:$.total }").ToArray();

					var regData = Enumerable.From(chartData).Select("[moment($.x).unix(), $.y]").ToArray();
					var rDataPoly = regression('polynomial', regData, 2);
					var rDataLine = regression('linear', regData);

					var polyData = Enumerable.From(rDataPoly.points).Select("{x:moment.unix($[0]).toDate(), y:$[1]}").ToArray();
					var lineData = Enumerable.From(rDataLine.points).Select("{x:moment.unix($[0]).toDate(), y:$[1]}").ToArray();

					self.chartConfig.data[0].dataPoints = chartData;
					self.chartConfig.data[1].dataPoints = polyData;
					self.chartConfig.data[2].dataPoints = lineData;

					var chart = self.element.CanvasJSChart();

					if (chart) {
						chart.options.data = self.chartConfig.data;
						chart.render();
					}
					else
						self.element.CanvasJSChart(self.chartConfig);
				};

			}

			// Class to diaply the top messages, circle charts
			var TopMessageChart = function (config) {
				var self = this;
				var defaults = {};
				var options = $.extend(true, {}, defaults, config);

				this.chartConfig = {
					animationEnabled: true,
					backgroundColor: "transparent",
					title: {
						fontColor: "#848484",
						fontSize: 70,
						horizontalAlign: "center",
						text: "",
						verticalAlign: "center"
					},
					toolTip: {
						backgroundColor: "#ffffff",
						borderThickness: 0,
						cornerRadius: 0,
						fontColor: "#424242"
					},
					data: [
						{
							explodeOnClick: false,
							innerRadius: "90%",
							radius: "90%",
							startAngle: 270,
							type: "doughnut",
							dataPoints: []
						}
					]
				};

				this.render = function (element, data) {
					if (!data) return;

					var messageClass = data.messageClass;
					var count = +data.count;
					var total = +data.total;
					var perc = parseFloat(data.perc).toFixed();

					self.chartConfig.title.text = perc + "%";
					self.chartConfig.data[0].dataPoints[0] = { y: perc, color: "#232181", toolTipContent: messageClass + ": <span>" + count + "</span>" };
					self.chartConfig.data[0].dataPoints[1] = { y: (100 - perc), color: "#ededed", toolTipContent: null };

					element.CanvasJSChart(self.chartConfig);
					element.next().text(messageClass);

				};
			};


			//////////////////
			// Setup
			//////////////////
			var worldMap = null;
			var topTenTbl = null;
			var liveFeed = new LifeFeedChart($('.life-feed-chart'), {
				controls: {
					play: $('.liveFeedStart'),
					stop: $('.liveFeedStop'),
					reset: $('.liveFeedReset')
				}
			});
			var heatMap = new HeatMapBuilder('.calendar-heatmap', {
				previousSelector: ".calendar-heatmap-previous",
				nextSelector: ".calendar-heatmap-next",
			});
			var trafficChart = new TrafficChart($('.traffic-chart'));
			var topMsgChart = new TopMessageChart();

			// Load the message types for the dropdown input
			LoadOptionsFromUrl(msgTypesURL, ['.calendar-heatmap-messagetype'], ["- All -"], [defaultMsgType]).then(function (typeData) {
				messageTypes = typeData;
			});

			// Working with date/time grouped messages...
			GetData(msgDataURL).then(function (data) {
				heatMap.render('month', data);
				trafficChart.render(data);
			});

			// Working with data from top message types
			GetData(msgTopUrl, { topCount: 3 }).then(function (data) {
				topMsgChart.render($('[data-top-chart="1"]'), data[0]);
				topMsgChart.render($('[data-top-chart="2"]'), data[1]);
				topMsgChart.render($('[data-top-chart="3"]'), data[2]);
			});

			// Google is special, we have to wait for them to load before we can do anything with their information
			google.charts.load('current', { 'packages': ['corechart'], mapsApiKey: "AIzaSyA2apvSegRVDBwS0MoVV_8nqkfaYs9CxLA" });
			google.charts.setOnLoadCallback(function () {

                worldMap = new GeoChartBuilder($('#regions_div')[0], $('#regions_date_slider')[0]);
				topTenTbl = new TopTenCountryTable($('.topCountriesTbl'));

				GetData(msgCountryUrl).then(function (data) {
					worldMap.renderMap(data);
					topTenTbl.buildTable(data);
				});
			});

			//////////////////
			// Events
			//////////////////

			$('.calendar-heatmap-messagetype').on('change', function (e) {
				var val = $(this).val();
				GetData(msgDataURL, { typeFilter: val }).then(function (msgData) {
					heatMap.render(heatMap.currentView, msgData);
					trafficChart.render(msgData);
				});
			});

			$('.calendar-heatmap-reset').on('click', function (e) {
				e.preventDefault();
				heatMap.render('month');
			});

			$('.topCountriesTbl').on('click', '.topCountryTblItem', function (e) {
				e.preventDefault();
				var countryCode = $(this).data('country-code');

				if (countryCode != worldMap.currentRegion)
					worldMap.goToRegion(countryCode);
				else
					worldMap.reset();
					
			});

			$(window).resize(function () {
				if (this.resizeTO) clearTimeout(this.resizeTO);
				this.resizeTO = setTimeout(function () {
					$(this).trigger('resizeEnd');
				}, 500);
			});

			//////////////////
			// Utils
			//////////////////

			function GetData(url, data) {
				if (url == undefined) return Promise.reject("No url");
				return new Promise(function (resolve, reject) {
					$.ajax({ url: url, dataType: 'json', data: data, type: (data) ? "POST" : "GET" })
					.done(function (data) { resolve(data); })
					.fail(function (err) { reject(err); });
				});
			}

			function LoadOptionsFromUrl(url, elements, emptyText, selected) {
				return GetData(url).then(function (data) {

					data = JSON.parse(data);
					data.sort();

					$.each(elements, function (ei, element) {

						if (!Array.isArray(emptyText) && emptyText != "")
							$('<option/>', { text: emptyText, value: "" }).appendTo($(element));
						else if (Array.isArray(emptyText) && emptyText[ei])
							$('<option/>', { text: emptyText[ei], value: "" }).appendTo($(element));

						$.each(data, function (i, obj) {
							$('<option/>', { value: obj, text: obj, })
								.attr("selected", (obj == selected[ei]) ? "Selected" : false)
								.appendTo($(element));
						});

					});

					return data;

				});
			}

		})();
	</script>

}